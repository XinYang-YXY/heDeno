//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace heDeno.MyDenoDBServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/heDenoDB")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Appointment", Namespace="http://schemas.datacontract.org/2004/07/heDenoDB.Entity")]
    [System.SerializableAttribute()]
    public partial class Appointment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int clinicIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string clinicNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string clinicTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int doctorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime endDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string firstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string lastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int patientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime startDateTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int clinicId {
            get {
                return this.clinicIdField;
            }
            set {
                if ((this.clinicIdField.Equals(value) != true)) {
                    this.clinicIdField = value;
                    this.RaisePropertyChanged("clinicId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string clinicName {
            get {
                return this.clinicNameField;
            }
            set {
                if ((object.ReferenceEquals(this.clinicNameField, value) != true)) {
                    this.clinicNameField = value;
                    this.RaisePropertyChanged("clinicName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string clinicType {
            get {
                return this.clinicTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.clinicTypeField, value) != true)) {
                    this.clinicTypeField = value;
                    this.RaisePropertyChanged("clinicType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int doctorId {
            get {
                return this.doctorIdField;
            }
            set {
                if ((this.doctorIdField.Equals(value) != true)) {
                    this.doctorIdField = value;
                    this.RaisePropertyChanged("doctorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime endDateTime {
            get {
                return this.endDateTimeField;
            }
            set {
                if ((this.endDateTimeField.Equals(value) != true)) {
                    this.endDateTimeField = value;
                    this.RaisePropertyChanged("endDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string firstName {
            get {
                return this.firstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.firstNameField, value) != true)) {
                    this.firstNameField = value;
                    this.RaisePropertyChanged("firstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lastName {
            get {
                return this.lastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.lastNameField, value) != true)) {
                    this.lastNameField = value;
                    this.RaisePropertyChanged("lastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int patientId {
            get {
                return this.patientIdField;
            }
            set {
                if ((this.patientIdField.Equals(value) != true)) {
                    this.patientIdField = value;
                    this.RaisePropertyChanged("patientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime startDateTime {
            get {
                return this.startDateTimeField;
            }
            set {
                if ((this.startDateTimeField.Equals(value) != true)) {
                    this.startDateTimeField = value;
                    this.RaisePropertyChanged("startDateTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyDenoDBServiceReference.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        heDeno.MyDenoDBServiceReference.CompositeType GetDataUsingDataContract(heDeno.MyDenoDBServiceReference.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<heDeno.MyDenoDBServiceReference.CompositeType> GetDataUsingDataContractAsync(heDeno.MyDenoDBServiceReference.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAppointmentsByPatientId", ReplyAction="http://tempuri.org/IService1/GetAppointmentsByPatientIdResponse")]
        heDeno.MyDenoDBServiceReference.Appointment[] GetAppointmentsByPatientId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAppointmentsByPatientId", ReplyAction="http://tempuri.org/IService1/GetAppointmentsByPatientIdResponse")]
        System.Threading.Tasks.Task<heDeno.MyDenoDBServiceReference.Appointment[]> GetAppointmentsByPatientIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateAppointment", ReplyAction="http://tempuri.org/IService1/CreateAppointmentResponse")]
        int CreateAppointment(System.DateTime startDateTime, System.DateTime endDateTime, int doctorId, int patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateAppointment", ReplyAction="http://tempuri.org/IService1/CreateAppointmentResponse")]
        System.Threading.Tasks.Task<int> CreateAppointmentAsync(System.DateTime startDateTime, System.DateTime endDateTime, int doctorId, int patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAppointment", ReplyAction="http://tempuri.org/IService1/UpdateAppointmentResponse")]
        int UpdateAppointment(int id, System.DateTime startDateTime, System.DateTime endDateTime, int doctorId, int patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAppointment", ReplyAction="http://tempuri.org/IService1/UpdateAppointmentResponse")]
        System.Threading.Tasks.Task<int> UpdateAppointmentAsync(int id, System.DateTime startDateTime, System.DateTime endDateTime, int doctorId, int patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOneAppointment", ReplyAction="http://tempuri.org/IService1/GetOneAppointmentResponse")]
        heDeno.MyDenoDBServiceReference.Appointment GetOneAppointment(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOneAppointment", ReplyAction="http://tempuri.org/IService1/GetOneAppointmentResponse")]
        System.Threading.Tasks.Task<heDeno.MyDenoDBServiceReference.Appointment> GetOneAppointmentAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : heDeno.MyDenoDBServiceReference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<heDeno.MyDenoDBServiceReference.IService1>, heDeno.MyDenoDBServiceReference.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public heDeno.MyDenoDBServiceReference.CompositeType GetDataUsingDataContract(heDeno.MyDenoDBServiceReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<heDeno.MyDenoDBServiceReference.CompositeType> GetDataUsingDataContractAsync(heDeno.MyDenoDBServiceReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public heDeno.MyDenoDBServiceReference.Appointment[] GetAppointmentsByPatientId(int id) {
            return base.Channel.GetAppointmentsByPatientId(id);
        }
        
        public System.Threading.Tasks.Task<heDeno.MyDenoDBServiceReference.Appointment[]> GetAppointmentsByPatientIdAsync(int id) {
            return base.Channel.GetAppointmentsByPatientIdAsync(id);
        }
        
        public int CreateAppointment(System.DateTime startDateTime, System.DateTime endDateTime, int doctorId, int patientId) {
            return base.Channel.CreateAppointment(startDateTime, endDateTime, doctorId, patientId);
        }
        
        public System.Threading.Tasks.Task<int> CreateAppointmentAsync(System.DateTime startDateTime, System.DateTime endDateTime, int doctorId, int patientId) {
            return base.Channel.CreateAppointmentAsync(startDateTime, endDateTime, doctorId, patientId);
        }
        
        public int UpdateAppointment(int id, System.DateTime startDateTime, System.DateTime endDateTime, int doctorId, int patientId) {
            return base.Channel.UpdateAppointment(id, startDateTime, endDateTime, doctorId, patientId);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAppointmentAsync(int id, System.DateTime startDateTime, System.DateTime endDateTime, int doctorId, int patientId) {
            return base.Channel.UpdateAppointmentAsync(id, startDateTime, endDateTime, doctorId, patientId);
        }
        
        public heDeno.MyDenoDBServiceReference.Appointment GetOneAppointment(int id) {
            return base.Channel.GetOneAppointment(id);
        }
        
        public System.Threading.Tasks.Task<heDeno.MyDenoDBServiceReference.Appointment> GetOneAppointmentAsync(int id) {
            return base.Channel.GetOneAppointmentAsync(id);
        }
    }
}
